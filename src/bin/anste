#!/usr/bin/perl

# Copyright (C) 2007-2014 José Antonio Calvo Fernández <jacalvo@zentyal.com>
# Copyright (C) 2013-2014 Rubén Durán Balda <rduran@zentyal.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use warnings;
use strict;

use FindBin qw($Bin);
use lib "$Bin/../src";

use ANSTE::Config;
use ANSTE::Status;
use ANSTE::Image::Creator;
use ANSTE::Image::Getter;
use ANSTE::Image::Image;
use ANSTE::Deploy::ScenarioDeployer;
use ANSTE::Scenario::BaseImage;
use ANSTE::Scenario::Scenario;
use ANSTE::Exceptions::InvalidFile;
use ANSTE::Test::Suite;
use ANSTE::Test::Runner;
use ANSTE::Report::TextWriter;
use ANSTE::Report::HTMLWriter;
use ANSTE::Virtualizer::Virtualizer;

use Getopt::Long;
use Pod::Usage;
use TryCatch::Lite;
use Perl6::Junction qw(none);
use Fcntl qw(:flock);

use constant LOCK_FILE => '/var/run/anste.lock';

my $create = '';
my $update = '';
my $getimg = '';
my $remove = '';
my $deploy = '';
my $shutdown = '';
my $test = '';
my $out = '';
my $path = '';
my $conf = '';
my $video = '';
my $format = '';
my $varfile = '';
my $wait = 0;
my $waitFail = 0;
my $abortOnFail = 0;
my $autoSnapshot = 0;
my $noDestroy = 0;
my $help = 0;
my $quiet = 0;
my $step = 0;
my $reuse = 0;
my $jump = '';
my $break = '';
my $openstack = 0;
my $identifier = '';

GetOptions('createimg' => \$create,
           'updateimg' => \$update,
           'getimg' => \$getimg,
           'remove' => \$remove,
           'deploy' => \$deploy,
           'shutdown' => \$shutdown,
           'test' => \$test,
           'path=s' => \$path,
           'conf=s' => \$conf,
           'out=s' => \$out,
           'video' => \$video,
           'format=s' => \$format,
           'vars=s' => \$varfile,
           'quiet' => \$quiet,
           'wait' => \$wait,
           'wait-fail' => \$waitFail,
           'abort-on-fail' => \$abortOnFail,
           'auto-snapshot' => \$autoSnapshot,
           'nodestroy' => \$noDestroy,
           'reuse' => \$reuse,
           'step' => \$step,
           'break=s' => \$break,
           'jump-to=s' => \$jump,
           'openstack' => \$openstack,
           'identifier=s' => \$identifier,
           'help' => \$help) or pod2usage(2);

pod2usage(1) if $help;

if (none($create, $update, $getimg, $remove, $deploy, $shutdown, $test) == 1) {
    pod2usage("$0: No action specified.");
}

my $status = ANSTE::Status->instance();
my $config = ANSTE::Config->instance();

# Set conf so that images are generated with support for OpenStack
$status->setUseOpenStack($openstack);

unless ($path) {
    $path = '.';
}
$config->setUserPath($path);
$config->setLocalConfPath($conf) if $conf;

if ($shutdown) {
    my $scenario = $status->currentScenario();
    unless ($scenario) {
        print "There is no scenario deployed.\n";
        exit (1);
    }
    destroy($scenario);
    exit (0);
}

pod2usage("$0: No files given.") if @ARGV == 0;

if ($quiet) {
    $config->setVerbose(0);
}
if ($wait) {
    $config->setWait(1);
}
if ($waitFail) {
    $config->setWaitFail(1);
}
if ($abortOnFail) {
    $config->setAbortOnFail(1);
}
if ($autoSnapshot) {
    $config->setAutoSnapshot(1);
}
if ($noDestroy) {
    $config->setNoDestroy(1);
}
if ($out) {
    $config->setLogPath($out);
}
if ($video) {
    $config->setWebVideo(1);
}
if ($reuse or $jump) {
    $config->setReuse(1);
}
if ($jump) {
    $config->setJump($jump);
    $reuse = 1;
}
if ($step) {
    $config->setStep(1);
}
if ($break) {
    my @breakpoints = split (/,/, $break);
    foreach my $breakpoint (@breakpoints) {
        $config->setBreakpoint($breakpoint);
    }
}
if ($identifier) {
    $config->setIdentifier($identifier);
}

# Check the config file for missing or malformed options
$config->check();

# Check if another instance of ANSTE is running
my $lockFile;
my $lockFilePath = LOCK_FILE;
$lockFilePath .= $config->identifier();
open ($lockFile, '>', $lockFilePath);
unless (flock ($lockFile, LOCK_EX | LOCK_NB)) {
    print STDERR 'Could not get the lock for ' . $lockFilePath . ": $!\n";
    print STDERR "Maybe another instance of ANSTE is already running\n";
    exit(1);
}

unless ($shutdown or $remove) {
    my $virtualizer = ANSTE::Virtualizer::Virtualizer->instance();

    # Check virtual machines already running
    my @vms = $virtualizer->listVMs();
    for my $vm (@vms) {
        print "$vm\n";
    }
    if ((scalar(@vms) > 0) and (not $reuse)) {
        print "WARNING: The above virtual machines are running.\n" .
              "Press any key to continue or Control-C to stop.\n";
        my $line = <STDIN>;
    }

    $virtualizer->cleanup();

    # Clean network from previous executions if not reusing the deployed scenario
    unless ($reuse) {
        $virtualizer->cleanNetwork($config->identifier());
    }
}

my @files;

# Separate args into files and variables
foreach my $arg (@ARGV) {
    if ($arg =~ /=/) {
        my ($var, $value) = split(/=/, $arg);

        if ($var and defined($value)) {
            try {
                $config->setVariable($var, $value);
            } catch (ANSTE::Exceptions::InvalidOption $e) {
                print STDERR "Invalid variable name: $var\n";
                exit(1);
            }
        } else {
            print STDERR "Malformed variable declaration passed.\n";
            exit(1);
        }
    }
    else {
        push(@files, $arg);
    }
}

$SIG{TERM} = \&term_handler;

my $ret = 0;

foreach my $file (@files) {
    if ($create) {
        create($file);
    } elsif ($update) {
        update($file);
    } elsif ($getimg) {
        getimg($file);
    } elsif ($remove) {
        remove($file);
    } elsif ($deploy) {
        deploy($file);
    } elsif ($test) {
        if ($format) {
            $config->setFormat($format);
        }
        test($file);
    }
}

unlock_and_exit();

############## Function declarations ##########################

sub unlock_and_exit
{
    flock ($lockFile, LOCK_UN);
    close ($lockFile);
    exit $ret;
}

sub term_handler
{
    destroy($config->currentScenario());
    unlock_and_exit();
}

sub create # (file)
{
    my ($file) = @_;

    my $image = new ANSTE::Image::Image();

    try {
        $image->loadFromFile($file);
    } catch (ANSTE::Exceptions::InvalidFile $e) {
        my $filename = $e->file();
        print STDERR "Can't load image $file.\n";
        print STDERR "Reason: Can't open file $filename.\n";
        exit(1);
    } catch (ANSTE::Exceptions::Error $e) {
        my $msg = $e->message();
        print STDERR "Error creating image $file:\n";
        print STDERR "$msg\n";
        exit(1);
    }

    my $address = $config->firstAddress();
    $image->setIp($address);

    my $creator = new ANSTE::Image::Creator($image);
    if (not $creator->createImage()) {
        my $name = $image->name();
        print STDERR "The image $name already exists.\n".
                     "Delete it before trying to create it again.\n";
        exit(1);
    }
}

sub update # (file)
{
    my ($file) = @_;

    my $image = new ANSTE::Scenario::BaseImage();

    try {
        $image->loadFromFile($file);
    } catch (ANSTE::Exceptions::InvalidFile $e) {
        my $filename = $e->file();
        print STDERR "Image '$file' does not exist.\n";
        print STDERR "Reason: Can't open file $filename.\n";
        exit(1);
    } catch (ANSTE::Exceptions::Error $e) {
        my $msg = $e->message();
        print STDERR "Error updating image $file:\n";
        print STDERR "$msg\n";
        exit(1);
    }

    my $creator = new ANSTE::Image::Creator($image);
    if (not $creator->update()) {
        my $name = $image->name();
        print STDERR "The update on the image $name was not successful.\n";
        exit(1);
    }
}

sub getimg # (file)
{
    my ($name) = @_;

    my $image = new ANSTE::Image::Image(name => $name);
    my $getter = new ANSTE::Image::Getter($image);
    if (not $getter->getImage()) {
        print STDERR "The image $name already exists.\n".
                        "Delete it before trying to download it again.\n";
        exit(1);
    }
}

sub remove # (file)
{
    my ($file) = @_;

    my $image = new ANSTE::Image::Image();

    try {
        $image->loadFromFile($file);
    } catch (ANSTE::Exceptions::InvalidFile $e) {
        # Try with '$file' as the image name
        $image->setName($file);
        my $cmd = new ANSTE::Image::Commands($image);
        if (not $cmd->deleteImage()) {
            my $filename = $e->file();
            print STDERR "Image '$file' does not exist.\n";
            print STDERR "Reason: Can't open file $filename.\n";
            exit(1);
        }

        return 0;
    } catch (ANSTE::Exceptions::Error $e) {
        my $msg = $e->message();
        print STDERR "Error removing image $file:\n";
        print STDERR "$msg\n";
        exit(1);
    }

    my $cmd = new ANSTE::Image::Commands($image);
    if (not $cmd->deleteImage()) {
        my $name = $image->name();
        print STDERR "The image $name can't be delete.\n".
                     "Maybe it doesn't exists.\n";
        exit(1);
    }

    return 0;
}

sub deploy # (file)
{
    my ($file) = @_;

    my $scenario = new ANSTE::Scenario::Scenario();
    try {
        $scenario->loadFromFile($file);
        $status->setCurrentScenario($file);
    } catch (ANSTE::Exceptions::InvalidFile $e) {
        my $filename = $e->file();
        print STDERR "Can't load scenario $file.\n";
        print STDERR "Reason: Can't open file $filename.\n";
        exit(1);
    } catch (ANSTE::Exceptions::Error $e) {
        my $msg = $e->message();
        print STDERR "Error deploying scenario $file:\n";
        print STDERR "$msg\n";
        exit(1);
    };

    my $deployer = new ANSTE::Deploy::ScenarioDeployer($scenario);
    $deployer->deploy();
}

sub destroy # (file)
{
    my ($file) = @_;

    my $scenario = new ANSTE::Scenario::Scenario();
    try {
        $scenario->loadFromFile($file);
    } catch (ANSTE::Exceptions::InvalidFile $e) {
        my $filename = $e->file();
        print STDERR "Can't load scenario $file.\n";
        print STDERR "Reason: Can't open file $filename.\n";
        exit(1);
    } catch (ANSTE::Exceptions::Error $e) {
        my $msg = $e->message();
        print STDERR "Error destroying scenario $file:\n";
        print STDERR "$msg\n";
        exit(1);
    };

    my $deployer = new ANSTE::Deploy::ScenarioDeployer($scenario);
    $deployer->destroy();
}

sub test
{
    my ($file) = @_;

    my $runner = new ANSTE::Test::Runner();

    try {
        if (ANSTE::Validate::suite($file)) {
            my $suite = new ANSTE::Test::Suite;
            $suite->loadFromDir($file, $varfile);
            my $invalidBreaks = ANSTE::Validate::breakpoints($suite, $config->breakpoints());
            if (@{$invalidBreaks}) {
                print STDERR "The following breakpoints are not defined, skipping: " . join(", ", @{$invalidBreaks}) . "\n";
            }
            $runner->runSuite($suite);
        } else {
            $runner->runDir($file);
        }
    } catch (ANSTE::Exceptions::InvalidFile $e) {
        my $filename = $e->file();
        print STDERR "Can't load test suite $file.\n";
        print STDERR "Reason: Can't open file $filename.\n";
        printResults($runner->report());
        exit(1);
    } catch (ANSTE::Exceptions::NotFound $e) {
        my $what = $e->what();
        my $value = $e->value();
        print STDERR "Error running test suite $file.\n";
        print STDERR "Reason: $what $value not found.\n";
        printResults($runner->report());
        exit(1);
    } catch (ANSTE::Exceptions::Error $e) {
        my $msg = $e->message();
        print STDERR "Error running test suite $file:\n";
        print STDERR "$msg\n";
        printResults($runner->report());
        exit(1);
    }
    printResults($runner->report());

    $ret = $runner->errors();
}

sub printResults # (report)
{
    my ($report) = @_;

    my $txtWriter = new ANSTE::Report::TextWriter($report);
    $txtWriter->write(\*STDOUT);
}

__END__

=head1 NAME

anste - Advanced Network Service Testing Environment

=head1 SYNOPSIS

anste [options] [file ...] [var1=value1 var2=value2 ...]

 Options:
   -help              show this help
   -createimg         create a base image
   -updateimg         update a base image
   -getimg            download a base image
   -remove            delete a base image
   -deploy            deploy a scenario
   -shutdown          destroy the deployed scenario and delete images
   -test              test a suite
   -path <dir>        where to find the data (CWD if not specified)
   -conf <file>       local configuration file (will overwrite the values of the global conf)
   -out  <dir>        report output directory
   -video             save video recording of web tests
   -format <fmt>      select the output format for the reports
   -wait              wait before shutting down once the test is completed
   -wait-fail         wait if a test fails
   -abort-on-fail     do not continue executing suites when one of them fails
   -nodestroy         keep scenario running after tests have finished
   -step              run tests step by step, waiting after each one
   -break <t1,t2,...> set breakpoints before the given test names
   -auto-snapshot     take snapshots before each step or breakpoint
   -openstack         images are generated with support for OpenStack
   -quiet             do not show output of commands
   -reuse             reuse the created image if exists (with -create)
                      reuse a deployed scenario (with -test)
   -jump-to <test>    reuse deployed scenario starting from specified test
   -vars <file>       override suite variables with the given YAML file
   -identifier        used as identifier when running multiple scenarios at the same time

=cut
